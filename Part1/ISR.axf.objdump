
D:/ECE243_Computer_Organization/Labs/Lab_6/Part1/ISR.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000005 	b	20 <SERVICE_UND>
   8:	ea000005 	b	24 <SERVICE_SVC>
   c:	ea000006 	b	2c <SERVICE_ABT_INST>
  10:	ea000004 	b	28 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000015 	b	74 <SERVICE_IRQ>
  1c:	ea000003 	b	30 <SERVICE_FIQ>

00000020 <SERVICE_UND>:
  20:	eafffffe 	b	20 <SERVICE_UND>

00000024 <SERVICE_SVC>:
  24:	eafffffe 	b	24 <SERVICE_SVC>

00000028 <SERVICE_ABT_DATA>:
  28:	eafffffe 	b	28 <SERVICE_ABT_DATA>

0000002c <SERVICE_ABT_INST>:
  2c:	eafffffe 	b	2c <SERVICE_ABT_INST>

00000030 <SERVICE_FIQ>:
  30:	eafffffe 	b	30 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
                .text    
                .global  _start 

_start:                                  
/* Set up stack pointers for IRQ and SVC processor modes */             
				LDR 	R1, = 0b11010010
  40:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR		CPSR_c, R1
  44:	e121f001 	msr	CPSR_c, r1
				LDR		SP, = 0xFFFFFFFC
  48:	e3e0d003 	mvn	sp, #3
				
				LDR		R1, = 0b11010011
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
				MSR		CPSR_c, R1
  50:	e121f001 	msr	CPSR_c, r1
				LDR		SP, = 0x3FFFFFFC
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003
				
                BL       CONFIG_GIC      // configure the ARM generic
  58:	eb000028 	bl	100 <CONFIG_GIC>
                                         // interrupt controller
/* Configure the KEY pushbuttons port to generate interrupts */
                LDR		R0, =0xFF200050
  5c:	e59f0090 	ldr	r0, [pc, #144]	; f4 <BIT_CODES+0x10>
				MOV		R1, #15
  60:	e3a0100f 	mov	r1, #15
				STR		R1, [R0, #8]
  64:	e5801008 	str	r1, [r0, #8]

/* Enable IRQ interrupts in the ARM processor */
                LDR		R0, =0b01010011
  68:	e3a00053 	mov	r0, #83	; 0x53
				MSR		CPSR_c, R0
  6c:	e121f000 	msr	CPSR_c, r0

00000070 <IDLE>:
IDLE:                                    
                B        IDLE            // main program simply idles
  70:	eafffffe 	b	70 <IDLE>

00000074 <SERVICE_IRQ>:

/* Define the exception service routines */

SERVICE_IRQ:    PUSH    {R0-R7, LR}     
  74:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                LDR     R4, =0xFFFEC100 // GIC CPU interface base address
  78:	e59f4078 	ldr	r4, [pc, #120]	; f8 <BIT_CODES+0x14>
                LDR     R5, [R4, #0x0C] // read the ICCIAR in the CPU
  7c:	e594500c 	ldr	r5, [r4, #12]

00000080 <KEYS_HANDLER>:
                                         // interface

KEYS_HANDLER:                       
                CMP      R5, #73         // check the interrupt ID
  80:	e3550049 	cmp	r5, #73	; 0x49

00000084 <UNEXPECTED>:

UNEXPECTED:     BNE      UNEXPECTED      // if not recognized, stop here
  84:	1afffffe 	bne	84 <UNEXPECTED>
                BL       KEY_ISR         
  88:	eb000002 	bl	98 <KEY_ISR>

0000008c <EXIT_IRQ>:

EXIT_IRQ:       STR      R5, [R4, #0x10] // write to the End of Interrupt
  8c:	e5845010 	str	r5, [r4, #16]
                                         // Register (ICCEOIR)
                POP      {R0-R7, LR}     
  90:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      // return from exception
  94:	e25ef004 	subs	pc, lr, #4

00000098 <KEY_ISR>:
				
KEY_ISR:		LDR		R5, =0xFF200050
  98:	e59f5054 	ldr	r5, [pc, #84]	; f4 <BIT_CODES+0x10>
				LDRB	R0, [R5, #12]
  9c:	e5d5000c 	ldrb	r0, [r5, #12]
				BL		DISPLAY
  a0:	eb000000 	bl	a8 <DISPLAY>
				B		EXIT_IRQ
  a4:	eafffff8 	b	8c <EXIT_IRQ>

000000a8 <DISPLAY>:

				
DISPLAY:    	LDR     R3, =0xFF200020 // base address of HEX3-HEX0
  a8:	e59f304c 	ldr	r3, [pc, #76]	; fc <BIT_CODES+0x18>
				MOV     R1, R0          // display R5 on HEX1-0
  ac:	e1a01000 	mov	r1, r0

				MOV		R6, PC
  b0:	e1a0600f 	mov	r6, pc
				B       SEG7_CODE       
  b4:	ea000005 	b	d0 <SEG7_CODE>
				MOV		R2, #4
  b8:	e3a02004 	mov	r2, #4
				MUL		R4, R0, R2
  bc:	e0040290 	mul	r4, r0, r2
				SUB		R4, #4
  c0:	e2444004 	sub	r4, r4, #4
				LSL     R1, R4     
  c4:	e1a01411 	lsl	r1, r1, r4
				
				STR     R4, [R3]        // display the number from R7
  c8:	e5834000 	str	r4, [r3]
				MOV		PC, LR
  cc:	e1a0f00e 	mov	pc, lr

000000d0 <SEG7_CODE>:

			
SEG7_CODE: 	 MOV     R2, #BIT_CODES  
  d0:	e3a020a4 	mov	r2, #164	; 0xa4
				ADD     R2, R1         // index into the BIT_CODES "array"
  d4:	e0822001 	add	r2, r2, r1
				LDRB    R1, [R2]       // load the bit pattern (to be returned)
  d8:	e5d21000 	ldrb	r1, [r2]
				ADD		R6, #4
  dc:	e2866004 	add	r6, r6, #4
				MOV     PC, R6 
  e0:	e1a0f006 	mov	pc, r6

000000e4 <BIT_CODES>:
  e4:	4f5b063f 	.word	0x4f5b063f
  e8:	077d6d66 	.word	0x077d6d66
  ec:	0000677f 	.word	0x0000677f
  f0:	00000000 	.word	0x00000000
  f4:	ff200050 	.word	0xff200050
  f8:	fffec100 	.word	0xfffec100
  fc:	ff200020 	.word	0xff200020

00000100 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
 100:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #MPCORE_PRIV_TIMER_IRQ
 104:	e3a0001d 	mov	r0, #29
    			MOV		R1, #CPU0
 108:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 10c:	eb00000d 	bl	148 <CONFIG_INTERRUPT>
    			MOV		R0, #INTERVAL_TIMER_IRQ
 110:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 114:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 118:	eb00000a 	bl	148 <CONFIG_INTERRUPT>
    			MOV		R0, #KEYS_IRQ
 11c:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 120:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 124:	eb000007 	bl	148 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 128:	e59f0060 	ldr	r0, [pc, #96]	; 190 <__cs3_region_init_size_ram>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 12c:	e59f1060 	ldr	r1, [pc, #96]	; 194 <__cs3_region_init_size_ram+0x4>
    			STR		R1, [R0, #0x04]
 130:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 134:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 138:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 13c:	e59f0054 	ldr	r0, [pc, #84]	; 198 <__cs3_region_init_size_ram+0x8>
    			STR		R1, [R0]    
 140:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 144:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000148 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 148:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 14c:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 150:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 154:	e59f2040 	ldr	r2, [pc, #64]	; 19c <__cs3_region_init_size_ram+0xc>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 158:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 15c:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 160:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 164:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 168:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 16c:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 170:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 174:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 178:	e59f2020 	ldr	r2, [pc, #32]	; 1a0 <__cs3_region_init_size_ram+0x10>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 17c:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 180:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 184:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 188:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 18c:	e8bd8030 	pop	{r4, r5, pc}
 190:	fffec100 	.word	0xfffec100
 194:	0000ffff 	.word	0x0000ffff
 198:	fffed000 	.word	0xfffed000
 19c:	fffed100 	.word	0xfffed100
 1a0:	fffed800 	.word	0xfffed800

000001a4 <SERVICE_UND>:
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
 1a4:	eafffffe 	b	1a4 <SERVICE_UND>

000001a8 <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 1a8:	eafffffe 	b	1a8 <SERVICE_SVC>

000001ac <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 1ac:	eafffffe 	b	1ac <SERVICE_ABT_DATA>

000001b0 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
 1b0:	eafffffe 	b	1b0 <SERVICE_ABT_INST>

000001b4 <SERVICE_FIQ>:
SERVICE_FIQ:                                
                    B   SERVICE_FIQ         
 1b4:	eafffffe 	b	1b4 <SERVICE_FIQ>
